const mongoose = require("mongoose");

const assessmentSchema = new mongoose.Schema({
  category: String,
  description: mongoose.Mixed,
  id: String,
  head: String,
  image: String,
  name: String,
  price: Number,
  createdAt: { type: Date, default: Date.now },
  updatedAt: { type: Date, default: Date.now },
  quantity: Number,
});
const couponSchema = new mongoose.Schema({
  code: String,
  singleUser: mongoose.Mixed,
  status: String,
  usedBy: mongoose.Mixed,
  uses: Number,
  createdAt: { type: Date, default: Date.now },
  updatedAt: { type: Date, default: Date.now },
  value: Number,
});

const courseSchema = new mongoose.Schema({
  courseId: {
    type: mongoose.Schema.Types.ObjectId,
    ref: "Courses",
  },
  instructor: String,
  access: {
    type: String,
    enum: ["lifetime", "limited", "once"],
    default: "once",
  },
  validity: Number,
  level: String,
});

const planSchema = new mongoose.Schema({
  displayName: String,
  validity: String,
  currency: String,
  status: { type: String, default: "active" },
  price: Number,
  createdAt: { type: Date, default: Date.now },
  updatedAt: { type: Date, default: Date.now },
});

const userSchema = new mongoose.Schema({
  uid: String,
  type: String,
  status: {
    default: "unverifed",
    type: String,
    enum: [
      "unverifed",
      "verified",
      "rejected",
      "pending",
      "restricted",
      "deleted",
    ],
  },
  symptoms: [mongoose.Mixed],
  treatments: [mongoose.Mixed],
  role: String,
  userId: String,
  meetLink: String,
  countryCode: String,
  notifications: mongoose.Mixed,
  balance: {
    type: Number,
    default: 500,
    min: [0, "Minimum Balance must be 0"],
  },
  abhaId: String,
  phoneNumber: String,
  alternatePhoneNumber: String,
  email: mongoose.Mixed,
  firstName: String,
  likes: [mongoose.Mixed],
  notifications: [mongoose.Mixed],
  addresses: [
    {
      name: { type: String, required: true },
      phone: { type: String, required: true },
      addressLine1: { type: String, required: true },
      addressLine2: { type: String },
      city: { type: String, required: true },
      state: { type: String, required: true },
      pincode: { type: String, required: true },
      country: { type: String, required: true },
      email: { type: String, required: true },
      landmark: { type: String },
    },
  ],
  google: {
    code: { type: String },
    refreshToken: { type: String },
    connected: { type: Boolean, default: false },
  },
  bookmarks: [mongoose.Mixed],
  credits: Number,
  instagram: String,
  facebook: String,
  twitter: String,
  github: String,
  linked_in: String,
  address_1: String,
  address_2: String,
  geotag: String,
  isAdmin: mongoose.Mixed,
  maritalStatus: String,
  occupation: String,
  religion: String,
  ethinicity: String,
  stateOfOrigin: String,
  countryOfOrigin: String,
  alternateEmail: String,
  alternateCountryCode: String,
  category: { type: [mongoose.Mixed] },
  dateOfBirth: String,
  displayName: String,
  bloodGroup: String,
  verification: { type: [mongoose.Mixed] },
  appointments: { type: [mongoose.Mixed] },
  achievements: { type: [mongoose.Mixed] },
  education: { type: [mongoose.Mixed] },
  permissions: { type: [mongoose.Mixed] },
  registration: { type: [mongoose.Mixed] },
  attachments: { type: [mongoose.Mixed] },
  services: { type: [mongoose.Mixed] },
  experience: { type: [mongoose.Mixed] },
  award: { type: [mongoose.Mixed] },
  membership: { type: [mongoose.Mixed] },
  certificates: { type: [mongoose.Mixed] },
  plan: [planSchema],
  gender: mongoose.Mixed,
  lastName: mongoose.Mixed,
  phone: String,
  organization: mongoose.Mixed,
  venture: mongoose.Mixed,
  createdBy: mongoose.Mixed,
  bills: [mongoose.Mixed],
  prescriptions: [mongoose.Mixed],
  password: { type: String, select: false },
  age: mongoose.Mixed,
  biography: String,
  clinic: mongoose.Mixed,
  clinicTimings: mongoose.Mixed,
  about: String,
  consultation: mongoose.Mixed,
  prefix: String,
  psychotherapy: mongoose.Mixed,
  price: String,
  psychotherapyPrice: String,
  rank: Number,
  platform: mongoose.Mixed,
  psyID: { type: Number },
  roles: { type: [mongoose.Mixed] },
  status: String,
  source: String,
  city: String,
  qr: String,
  availability: mongoose.Mixed,
  location: [mongoose.Mixed],
  otp: String,
  isVenture: { type: Boolean, default: false },
  isClock: { type: Boolean, default: false },
  created: { type: Boolean, default: true },
  group: { type: String },
  yearsOfExperience: String,
  orgName: String,
  country: String,
  title: String,
  photoURL: String,
  pincode: String,
  qualifications: String,
  designation: String,
  courses: [courseSchema],
  instructor: mongoose.Mixed,
  slots: { type: [mongoose.Mixed] },
  specialization: String,
  state: String,
  workExperience: { type: [mongoose.Mixed] },
  desiredJobTitle: { type: [mongoose.Mixed] },
  skills: { type: [mongoose.Mixed] },
  languages: { type: [mongoose.Mixed] },
  coverLetter: { type: [mongoose.Mixed] },
  expertise: String,
  currentSalary: { type: String },
  expectedSalary: { type: String },
  deleted: { type: Boolean, default: false },
  deactivated: { type: Boolean, default: false },
  createdAt: { type: Date, default: Date.now },
  updatedAt: { type: Date, default: Date.now },

  // newly added schemas for the social app
  socialUserName: {
    type: String,
    default: "",
    unique : true,
    required : false
  },
  aboutMe: {
    type: String,
    default: "",
  },
  livesIn: {
    type: String,
    default: "",  
  },
  joined: {
    type: Date,
    default: Date.now,
  },
  status: {
    type: String,
    default: "Single",
  },
  socialId: {
    type: String,
    default: "",
  },
  image: {
    url: String,
    public_id: String,
  },
  socialMediaProfileImage : {
    type: String,
  },
  // following:[{type:Schema.ObjectId, ref: 'User'}], // ObjectId should be unique id which we will get when we save anything in mongodb
  // followers:[{type:Schema.ObjectId, ref: 'User'}],
});

const leadSchema = new mongoose.Schema({
  uid: String,
  type: String,
  role: String,
  userId: String,
  meetLink: String,
  countryCode: String,
  phoneNumber: String,
  email: mongoose.Mixed,
  firstName: String,
  credits: Number,
  instagram: String,
  facebook: String,
  twitter: String,
  documents: mongoose.Mixed,
  github: String,
  linked_in: String,
  address_1: String,
  address_2: String,
  geotag: String,
  isAdmin: mongoose.Mixed,
  category: { type: [mongoose.Mixed] },
  dateOfBirth: String,
  displayName: String,
  gender: mongoose.Mixed,
  lastName: mongoose.Mixed,
  phone: String,
  organization: mongoose.Mixed,
  venture: mongoose.Mixed,
  bills: [mongoose.Mixed],
  prescriptions: [mongoose.Mixed],
  password: String,
  age: mongoose.Mixed,
  biography: String,
  clinic: mongoose.Mixed,
  clinicTimings: mongoose.Mixed,
  about: String,
  consultation: mongoose.Mixed,
  prefix: String,
  psychotherapy: mongoose.Mixed,
  price: String,
  psychotherapyPrice: String,
  rank: Number,
  status: String,
  source: String,
  city: String,
  qr: String,
  created: { type: Boolean, default: false },
  yearsOfExperience: String,
  availability: mongoose.Mixed,
  location: [mongoose.Mixed],
  orgName: String,
  country: String,
  title: String,
  photoURL: String,
  pincode: String,
  qualifications: String,
  assessments: [mongoose.Mixed],
  designation: String,
  instructor: mongoose.Mixed,
  specialization: { type: [mongoose.Mixed] },
  state: String,
  workExperience: { type: [mongoose.Mixed] },
  desiredJobTitle: { type: [mongoose.Mixed] },
  skills: { type: [mongoose.Mixed] },
  languages: { type: [mongoose.Mixed] },
  coverLetter: { type: [mongoose.Mixed] },
  expertise: { type: [mongoose.Mixed] },
  currentSalary: { type: String },
  expectedSalary: { type: String },
  deleted: { type: Boolean, default: false },
  deactivated: { type: Boolean, default: false },
  createdAt: { type: Date, default: Date.now },
  updatedAt: { type: Date, default: Date.now },
});

const postSchema = new mongoose.Schema(
  {
    content: {
      type: {}, // Allows for rich text content
      required: true,
    },
    postedBy: {
      type: mongoose.Schema.ObjectId,
      ref: "User",
    },
    post: {
      url: String,
      
    },
  
    postType: {
      type: String,
      enum: ["textPost", "videoPost", "imagePost", "linkPost"], // Enum for allowed post types
      default: "textPost", // Default to 'textPost'
    },
    like: [{ type: mongoose.Schema.ObjectId, ref: "User" }],
    comment: [
      {
        text: String,
        created: { type: Date, default: Date.now },
        postedBy: {
          type: mongoose.Schema.ObjectId,
          ref: "User",
        },
      },
    ],
  },
  { timestamps: true }
);


const Posts = mongoose.model("Post", postSchema);
const User = mongoose.model("User", userSchema);
const Coupon = mongoose.model("Coupon", couponSchema);
const Assessment = mongoose.model("Assessment", assessmentSchema);
const Lead = mongoose.model("lead", leadSchema);

module.exports = { User, Coupon, Assessment, Lead, Posts };
